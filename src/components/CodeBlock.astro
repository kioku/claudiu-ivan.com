---
// This component will be used to enhance code blocks with copy functionality
---

<script>
  // --- Constants ---
  const COPY_ICON_SVG = `
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
      <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
    </svg>
  `;
  const COPIED_ICON_SVG = `
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <path d="M20 6L9 17l-5-5"></path>
    </svg>
  `;
  const RESET_TIMEOUT_MS = 2000;

  /**
   * This function finds all <pre> elements within articles and adds a copy button to them.
   * It's designed to be idempotent, so it won't add a button if one already exists.
   */
  function initCopyButtons() {
    const preElements = document.querySelectorAll("article pre");

    preElements.forEach((pre) => {
      if (!(pre instanceof HTMLElement) || pre.closest(".code-block-wrapper")) {
        return;
      }

      // Create a wrapper div for positioning context
      const wrapper = document.createElement("div");
      wrapper.className = "code-block-wrapper relative group";

      // Move pre element inside the wrapper
      pre.parentNode?.insertBefore(wrapper, pre);
      wrapper.appendChild(pre);

      // Add visual feedback for hover state
      pre.classList.add("group-hover:opacity-90");

      const copyButton = document.createElement("button");
      copyButton.className = "copy-button absolute w-8 h-8 top-2 right-2 p-2 text-sm hover:bg-gray-700/50 text-white rounded transition-colors duration-200 opacity-0 group-hover:opacity-100 flex items-center justify-center z-10";
      copyButton.innerHTML = COPY_ICON_SVG;
      copyButton.setAttribute("aria-label", "Copy code to clipboard");

      wrapper.appendChild(copyButton);
    });
  }

  /**
   * Handles click events on copy buttons using event delegation.
   * @param {MouseEvent} event
   */
  async function handleCopyClick(event: MouseEvent) {
    const target = event.target;
    if (!(target instanceof Element)) return;

    const copyButton = target.closest(".copy-button");
    if (!copyButton || !(copyButton instanceof HTMLButtonElement)) return;

    const wrapper = copyButton.parentElement;
    const pre = wrapper?.querySelector("pre");
    const code = pre?.querySelector("code");

    if (!code?.textContent) return;

    try {
      await navigator.clipboard.writeText(code.textContent);

      copyButton.innerHTML = COPIED_ICON_SVG;

      setTimeout(() => {
        copyButton.innerHTML = COPY_ICON_SVG;
      }, RESET_TIMEOUT_MS);
    } catch (err) {
      console.error("Failed to copy:", err);
      copyButton.title = "Failed to copy";
    }
  }

  // --- Event Listeners ---
  // Use event delegation for copy functionality
  document.addEventListener("click", handleCopyClick);

  // Initialize buttons on initial page load
  document.addEventListener("DOMContentLoaded", initCopyButtons);

  // Re-initialize buttons on page transitions
  document.addEventListener("astro:page-load", initCopyButtons);
</script>
